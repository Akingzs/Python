# O polimorfismo √© um conceito fundamental na programa√ß√£o orientada a objetos (OOP) 
# que permite que um mesmo m√©todo tenha comportamentos diferentes em classes diferentes.
# Isso significa que um m√©todo pode ser usado de maneira uniforme, 
# independentemente da classe do objeto em que est√° sendo chamado

# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.

# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ


class Animal:
    def locomove(self):
        pass

class Peixe(Animal):
    def locomove(self):
        print("Um peixe nada.")

class Elefante(Animal):
    def locomove(self):
        print("Um elefante anda.")

class Passaro(Animal):
    def locomove(self) -> bool:
        print("Um p√°ssaro voa.")
        return True

def animal_moveu(animal: Animal):
    animal_moveu = animal.locomove()
    if animal_moveu:
        print('Animal se moveu') 
    
    
ave = Passaro()

animal_moveu(ave)